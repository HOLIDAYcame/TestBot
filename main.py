import re
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.exceptions import TelegramAPIError
import asyncpg
from config import BOT_TOKEN
from database import init_db, register_user
from keyboards import get_phone_keyboard, get_main_menu, get_contacts_inline_keyboard
from states import Registration

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
class ErrorHandlingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        try:
            return await handler(event, data)
        except asyncpg.exceptions.UniqueViolationError as e:
            logger.error(f"Database error (UniqueViolation): {e}")
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=get_main_menu()
                )
        except asyncpg.exceptions.PostgresError as e:
            logger.error(f"Database error: {e}")
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_menu()
                )
        except TelegramAPIError as e:
            logger.error(f"Telegram API error: {e}")
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –û—à–∏–±–∫–∞ Telegram. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
                )
        except Exception as e:
            logger.error(f"Unexpected error: {e}", exc_info=True)
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º! üòä",
                    reply_markup=get_main_menu()
                )
        return

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì
def is_valid_date(date_str: str) -> bool:
    pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(pattern, date_str):
        return False
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
    )
    await state.set_state(Registration.waiting_for_full_name)

@dp.message(Registration.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name or len(full_name.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return
    await state.update_data(full_name=full_name)
    await message.answer(
        "üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990):"
    )
    await state.set_state(Registration.waiting_for_birth_date)

@dp.message(Registration.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    birth_date = message.text.strip()
    if not is_valid_date(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990).")
        return
    await state.update_data(birth_date=birth_date)
    await message.answer(
        "üì± –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(Registration.waiting_for_phone)

@dp.message(Registration.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    phone_number = message.contact.phone_number
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    birth_date_str = user_data["birth_date"]
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É birth_date –≤ –æ–±—ä–µ–∫—Ç datetime.date
        birth_date = datetime.strptime(birth_date_str, '%d.%m.%Y').date()
    except ValueError as e:
        logger.error(f"Date parsing error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
        await state.clear()
        return
    
    user_id = message.from_user.id

    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await register_user(user_id, full_name, birth_date, phone_number)
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–§–ò–û: {full_name}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_str}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except asyncpg.exceptions.UniqueViolationError:
        # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ middleware, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —è–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—è–º–±–¥–∞-—Ñ—É–Ω–∫—Ü–∏–π
@dp.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def handle_request(message: Message):
    await message.answer(
        "üìù *–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É* üìù\n\n"
        "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üîß\n"
        "–°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ –∑–¥–µ—Å—å. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üòä",
        parse_mode="Markdown"
    )

@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contacts(message: Message):
    contacts_text = (
        "üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã* üìû\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n"
        "üìß *Email*: blazekartet@gmail.com\n"
        "‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω*: +7 (951) 891-68-71\n"
        "üè¢ *–ê–¥—Ä–µ—Å*: –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∞—è, –¥. 31–ë\n\n"
        "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! üëá"
    )
    await message.answer(
        contacts_text,
        parse_mode="Markdown",
        reply_markup=get_contacts_inline_keyboard()
    )

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def handle_company_info(message: Message):
    company_text = (
        "üåü *–û –Ω–∞—Å* üåü\n\n"
        "–ú—ã - *HOLIDAY Company*! üöÄ\n"
        "–° 2020 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞—ë–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –ª—É—á—à–µ. "
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ª—é–¥–µ–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–µ–ª–∏–∫–∏—Ö —Ü–µ–ª–µ–π! üåç\n\n"
        "üîπ *–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º?*\n"
        "- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã–µ IT-–ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        "- –ü–æ–º–æ–≥–∞–µ–º –±–∏–∑–Ω–µ—Å–∞–º —Ä–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n"
        "- –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!\n\n"
        "üîπ *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*\n"
        "- –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ.\n"
        "- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n"
        "- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤! üíº\n\n"
        "–ë—É–¥–µ–º —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! üòä"
    )
    
    try:
        await message.answer_photo(
            photo=FSInputFile("images/company_logo2.jpg"),
            caption=company_text,
            parse_mode="Markdown"
        )
    except FileNotFoundError as e:
        logger.error(f"Image file not found: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n" + company_text,
            parse_mode="Markdown"
        )

async def main():
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
    dp.update.middleware(ErrorHandlingMiddleware())
    await init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())