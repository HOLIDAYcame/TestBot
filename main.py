import re
import logging
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery, BotCommand, InlineKeyboardMarkup, InlineKeyboardButton  
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from aiogram.exceptions import TelegramAPIError
import asyncpg
from config import BOT_TOKEN
from database import init_db, register_user, save_request, get_statistics, get_all_user_ids, is_admin
from keyboards import get_phone_keyboard, get_main_menu, get_contacts_inline_keyboard, get_request_type_keyboard, get_cancel_keyboard, get_admin_menu_keyboard, get_broadcast_confirm_keyboard, get_broadcast_input_keyboard
from states import Registration, RequestForm, AdminPanel
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

class ErrorHandlingMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        try:
            return await handler(event, data)
        except asyncpg.exceptions.UniqueViolationError as e:
            logger.error(f"Database error (UniqueViolation): {e}")
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
                    reply_markup=get_main_menu()
                )
        except asyncpg.exceptions.PostgresError as e:
            logger.error(f"Database error: {e}")
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_main_menu()
                )
        except TelegramAPIError as e:
            logger.error(f"Telegram API error: {e}")
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –û—à–∏–±–∫–∞ Telegram. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
                )
        except Exception as e:
            logger.error(f"Unexpected error: {e}", exc_info=True)
            if isinstance(event, Message):
                await event.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º! üòä",
                    reply_markup=get_main_menu()
                )
        return

def is_valid_date(date_str: str) -> bool:
    pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(pattern, date_str):
        return False
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def entities_to_html(text: str, entities: list) -> str:
    if not entities:
        return text
    sorted_entities = sorted(entities, key=lambda x: x.offset, reverse=True)
    result = text
    for entity in sorted_entities:
        start = entity.offset
        end = entity.offset + entity.length
        if start >= len(result) or end > len(result):
            continue
        entity_text = result[start:end]
        if entity.type == "bold":
            replacement = f"<b>{entity_text}</b>"
        elif entity.type == "italic":
            replacement = f"<i>{entity_text}</i>"
        elif entity.type == "code":
            replacement = f"<code>{entity_text}</code>"
        elif entity.type == "pre":
            replacement = f"<pre>{entity_text}</pre>"
        elif entity.type == "text_link":
            replacement = f'<a href="{entity.url}">{entity_text}</a>'
        elif entity.type == "strikethrough":
            replacement = f"<del>{entity_text}</del>"
        elif entity.type == "underline":
            replacement = f"<u>{entity_text}</u>"
        elif entity.type == "spoiler":
            replacement = f"<tg-spoiler>{entity_text}</tg-spoiler>"
        else:
            continue
        result = result[:start] + replacement + result[end:]
    return result

@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    import asyncpg
    user_id = message.from_user.id
    try:
        conn = await asyncpg.connect(**config.DB_CONFIG)
        user = await conn.fetchrow("SELECT user_id FROM users WHERE user_id=$1", user_id)
        await conn.close()
    except Exception as e:
        logger.error(f"DB error on user check: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu())
        await state.clear()
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:"
        )
        await state.set_state(Registration.waiting_for_full_name)

@dp.message(Registration.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    if not full_name or len(full_name.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return
    await state.update_data(full_name=full_name)
    await message.answer(
        "üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990):"
    )
    await state.set_state(Registration.waiting_for_birth_date)

@dp.message(Registration.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    birth_date = message.text.strip()
    if not is_valid_date(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990).")
        return
    try:
        date_obj = datetime.strptime(birth_date, '%d.%m.%Y').date()
        if date_obj > datetime.now().date():
            await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            return
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(birth_date=birth_date)
    await message.answer(
        "üì± –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(Registration.waiting_for_phone)

@dp.message(Registration.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    if not message.contact:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    phone_number = message.contact.phone_number
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    birth_date_str = user_data["birth_date"]
    try:
        birth_date = datetime.strptime(birth_date_str, '%d.%m.%Y').date()
    except ValueError as e:
        logger.error(f"Date parsing error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /start.")
        await state.clear()
        return
    user_id = message.from_user.id
    try:
        await register_user(user_id, full_name, birth_date, phone_number)
        await message.answer(
            "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–§–ò–û: {full_name}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_str}\n"
            f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=get_main_menu()
        )
        await state.clear()
    except asyncpg.exceptions.UniqueViolationError:
        await message.answer(
            "‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:",
            reply_markup=get_main_menu()
        )
        await state.clear()

@dp.message(lambda message: message.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: Message, state: FSMContext):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:",
        reply_markup=get_request_type_keyboard()
    )
    await state.set_state(RequestForm.choosing_type)

@dp.message(RequestForm.choosing_type)
async def process_request_type(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    if message.text not in ["üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè¢ –û—Ñ–∏—Å", "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", "‚ùì –î—Ä—É–≥–æ–µ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_request_type_keyboard())
        return
    await state.update_data(request_type=message.text)
    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(RequestForm.attaching_screenshot)

@dp.message(RequestForm.attaching_screenshot)
async def process_screenshot(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return
    if not message.photo and message.content_type != 'text':
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_cancel_keyboard())
        return
    if message.photo:
        photo_id = message.photo[-1].file_id
        await state.update_data(screenshot=photo_id)
        await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:", reply_markup=None)
    else:
        await state.update_data(screenshot=None)
        await message.answer("–§–æ—Ç–æ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:", reply_markup=None)
    from keyboards import get_options_inline_keyboard
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É–Ω–∫—Ç–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–º–µ—á–∞—é—Ç—Å—è –≥–∞–ª–æ—á–∫–æ–π):",
        reply_markup=get_options_inline_keyboard()
    )
    await state.set_state(RequestForm.choosing_options)

@dp.callback_query(RequestForm.choosing_options)
async def process_options_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = set(data.get("options", []))
    option_map = {
        "equipment": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        "it": "IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "cleaning": "–£–±–æ—Ä–∫–∞",
        "coffee": "–ö–æ—Ñ–µ"
    }
    if callback.data.startswith("option:"):
        option = callback.data.split(":", 1)[1]
        if option in selected:
            selected.remove(option)
        else:
            selected.add(option)
        await state.update_data(options=list(selected))
        from keyboards import get_options_inline_keyboard
        await callback.message.edit_reply_markup(reply_markup=get_options_inline_keyboard(selected))
        await callback.answer()
    elif callback.data == "confirm":
        data = await state.get_data()
        selected = set(data.get("options", []))
        if not selected:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç!", show_alert=True)
            return
        user_id = callback.from_user.id
        request_type = data.get("request_type")
        screenshot = data.get("screenshot")
        options = list(selected)
        import asyncpg
        try:
            conn = await asyncpg.connect(**config.DB_CONFIG)
            user = await conn.fetchrow("SELECT full_name, phone_number FROM users WHERE user_id=$1", user_id)
            await conn.close()
        except Exception as e:
            logger.error(f"DB error on user fetch: {e}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
            await state.clear()
            await callback.answer()
            return
        full_name = user["full_name"] if user else "-"
        phone = user["phone_number"] if user else "-"
        try:
            request_id = await save_request(user_id, request_type, screenshot, options)
        except Exception as e:
            logger.error(f"DB error on request save: {e}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
            await state.clear()
            await callback.answer()
            return
        ADMIN_CHAT_ID = -1002755127121
        rus_options = [option_map.get(opt, opt) for opt in options]
        text = f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n–û—Ç: {full_name} ({phone})\n–¢–∏–ø: {request_type}\n–ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join(rus_options) if rus_options else '-'}"
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å', url=f'tg://user?id={user_id}')
        ]])
        try:
            if screenshot:
                await bot.send_photo(ADMIN_CHAT_ID, photo=screenshot, caption=text, reply_markup=kb)
            else:
                await bot.send_message(ADMIN_CHAT_ID, text, reply_markup=kb)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º —Å –∫–Ω–æ–ø–∫–æ–π: {e}")
            try:
                if screenshot:
                    await bot.send_photo(ADMIN_CHAT_ID, photo=screenshot, caption=text)
                else:
                    await bot.send_message(ADMIN_CHAT_ID, text)
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏: {e2}")
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception:
            pass
        await callback.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu())
        await state.clear()
        await callback.answer()
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.", show_alert=True)

@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contacts(message: Message):
    contacts_text = (
        "üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã* üìû\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º:\n"
        "üìß *Email*: blazekartet@gmail.com\n"
        "‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω*: +7 (951) 891-68-71\n"
        "üè¢ *–ê–¥—Ä–µ—Å*: –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∞—è, –¥. 31–ë\n\n"
        "–ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏! üëá"
    )
    await message.answer(
        contacts_text,
        parse_mode="Markdown",
        reply_markup=get_contacts_inline_keyboard()
    )

@dp.message(lambda message: message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def handle_company_info(message: Message):
    company_text = (
        "üåü *–û –Ω–∞—Å* üåü\n\n"
        "–ú—ã - *HOLIDAY Company*! üöÄ\n"
        "–° 2020 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞—ë–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –ª—É—á—à–µ. "
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ª—é–¥–µ–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–µ–ª–∏–∫–∏—Ö —Ü–µ–ª–µ–π! üåç\n\n"
        "üîπ *–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º?*\n"
        "- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥–æ–≤—ã–µ IT-–ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        "- –ü–æ–º–æ–≥–∞–µ–º –±–∏–∑–Ω–µ—Å–∞–º —Ä–∞—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.\n"
        "- –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤!\n\n"
        "üîπ *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?*\n"
        "- –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ.\n"
        "- –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥.\n"
        "- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤! üíº\n\n"
        "–ë—É–¥–µ–º —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É! üòä"
    )
    try:
        await message.answer_photo(
            photo=FSInputFile("images/company_logo2.jpg"),
            caption=company_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Image file not found or error: {e}")
        await message.answer(company_text, parse_mode="Markdown")

@dp.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await message.answer(
        "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=get_admin_menu_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("admin_"))
async def admin_callback_handler(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    if callback.data == "admin_stats":
        users_count, requests_count = await get_statistics()
        stats_text = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\nüìù –ó–∞—è–≤–æ–∫: {requests_count}"
        await callback.message.edit_text(stats_text, parse_mode="Markdown", reply_markup=get_admin_menu_keyboard())
    
    elif callback.data == "admin_broadcast":
        await callback.message.edit_text(
            "üì¢ *–†–∞—Å—Å—ã–ª–∫–∞*\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º):",
            parse_mode="Markdown",
            reply_markup=get_broadcast_input_keyboard()
        )
        await state.set_state(AdminPanel.waiting_for_broadcast_message)
    
    elif callback.data == "admin_users":
        page = 1  
        await show_users_page(callback.message, page, state)
    
    elif callback.data == "admin_back":
        await callback.message.edit_text(
            "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="Markdown",
            reply_markup=get_admin_menu_keyboard()
        )
    
    elif callback.data == "admin_cancel":
        await callback.message.edit_text(
            "‚ùå –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞.",
            parse_mode="Markdown"
        )
        await state.clear()
    
    await callback.answer()

@dp.message(AdminPanel.waiting_for_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    
    if message.message_thread_id is None:  
        try:
            await message.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id - 1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    text = message.text or message.caption or ""
    entities = message.entities or message.caption_entities or []
    
    if entities:
        text = entities_to_html(text, entities)
        parse_mode = "HTML"
    else:
        parse_mode = None
    
    broadcast_data = {
        "text": text,
        "photo": message.photo[-1].file_id if message.photo else None,
        "parse_mode": parse_mode
    }
    await state.update_data(broadcast_data=broadcast_data)
    
    preview_text = f"üì¢ *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
    if broadcast_data["photo"]:
        preview_text += "üì∑ *–§–æ—Ç–æ:* –î–∞\n"
    preview_text += f"üìù *–¢–µ–∫—Å—Ç:* {broadcast_data['text'][:100]}{'...' if len(broadcast_data['text']) > 100 else ''}"
    
    if broadcast_data["photo"]:
        await message.answer_photo(
            photo=broadcast_data["photo"],
            caption=preview_text,
            parse_mode="Markdown",
            reply_markup=get_broadcast_confirm_keyboard()
        )
    else:
        await message.answer(
            preview_text,
            parse_mode="Markdown",
            reply_markup=get_broadcast_confirm_keyboard()
        )
    await state.set_state(AdminPanel.confirming_broadcast)

@dp.callback_query(lambda c: c.data.startswith("broadcast_"))
async def broadcast_confirm_handler(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    if callback.data == "broadcast_confirm":
        data = await state.get_data()
        broadcast_data = data.get("broadcast_data", {})
        
        try:
            user_ids = await get_all_user_ids()
            success_count = 0
            
            for user_id in user_ids:
                try:
                    if broadcast_data["photo"]:
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=broadcast_data["photo"],
                            caption=broadcast_data["text"],
                            parse_mode=broadcast_data.get("parse_mode")
                        )
                    else:
                        await bot.send_message(
                            chat_id=user_id,
                            text=broadcast_data["text"],
                            parse_mode=broadcast_data.get("parse_mode")
                        )
                    success_count += 1
                except Exception as e:
                    logger.error(f"Failed to send broadcast to {user_id}: {e}")
                    continue
            
            await callback.message.edit_text(
                f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(user_ids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                parse_mode="Markdown",
                reply_markup=get_admin_menu_keyboard()
            )
        except Exception as e:
            logger.error(f"Broadcast error: {e}")
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.",
                reply_markup=get_admin_menu_keyboard()
            )
        await state.clear()
    
    elif callback.data == "broadcast_cancel":
        await callback.message.edit_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_admin_menu_keyboard()
        )
        await state.clear()
    
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("users_page:") or c.data.startswith("user_info:"))
async def user_pagination_handler(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    if callback.data.startswith("users_page:"):
        page = int(callback.data.split(":")[1])
        await show_users_page(callback.message, page, state)
    
    elif callback.data.startswith("user_info:"):
        user_id = int(callback.data.split(":")[1])
        conn = await asyncpg.connect(**config.DB_CONFIG)
        try:
            user = await conn.fetchrow("SELECT user_id, full_name, birth_date, phone_number FROM users WHERE user_id = $1", user_id)
        finally:
            await conn.close()
        
        if user:
            user_info = (
                f"‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
                f"üë§ –ò–º—è: {user['full_name']}\n"
                f"üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['birth_date'].strftime('%d.%m.%Y')}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone_number']}"
            )
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="users_back")]
            ])
            await callback.message.edit_text(user_info, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu_keyboard())
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "users_back")
async def user_back_handler(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", show_alert=True)
        return
    
    data = await state.get_data()  
    page = data.get("current_page", 1)  
    await show_users_page(callback.message, page, state)
    await callback.answer()


async def show_users_page(message: types.Message, page: int, state: FSMContext):
    all_user_ids = await get_all_user_ids()
    total_users = len(all_user_ids)
    users_per_page = 5
    total_pages = (total_users + users_per_page - 1) // users_per_page
    if page < 1:
        page = total_pages
    elif page > total_pages:
        page = 1
    
    start_idx = (page - 1) * users_per_page
    end_idx = start_idx + users_per_page
    current_users = all_user_ids[start_idx:end_idx]
    
    conn = await asyncpg.connect(**config.DB_CONFIG)
    try:
        users_data = await conn.fetch("SELECT user_id, full_name, birth_date, phone_number FROM users WHERE user_id = ANY($1)", current_users)
    finally:
        await conn.close()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    for user in users_data:
        user_id = user["user_id"]
        full_name = user["full_name"]
        keyboard.inline_keyboard.append([InlineKeyboardButton(text=full_name, callback_data=f"user_info:{user_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination = [
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"users_page:{page - 1}" if page > 1 else f"users_page:{total_pages}"),
        InlineKeyboardButton(text=f"–°—Ç—Ä. {page}/{total_pages}", callback_data="none"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"users_page:{page + 1}" if page < total_pages else f"users_page:1")
    ]
    keyboard.inline_keyboard.append(pagination)
    
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")])
    
    await message.edit_text(
        f"üë• *–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* (–°—Ç—Ä. {page}/{total_pages})\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await state.update_data(current_page=page)

async def main():
    dp.update.middleware(ErrorHandlingMiddleware())
    await init_db()
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

