import logging
import re
from datetime import datetime

import asyncpg
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    CallbackQuery, FSInputFile, InlineKeyboardButton, 
    InlineKeyboardMarkup, Message
)

from src.config import ADMIN_CHAT_ID
from src.database import is_admin, register_user, save_request
from src.keyboards import (
    get_admin_menu_keyboard, get_cancel_keyboard, get_contacts_inline_keyboard,
    get_main_menu, get_options_inline_keyboard, get_phone_keyboard,
    get_request_type_keyboard
)
from src.states import Registration, RequestForm
from src.utils.validators import entities_to_html, is_valid_date


logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    pool = message.bot.get("db_pool")
    if not pool:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    async with pool.acquire() as conn:
        try:
            user = await conn.fetchrow("SELECT user_id FROM users WHERE user_id=$1", message.from_user.id)
        except Exception as e:
            logger.error(f"DB error on user check: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        if user:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=get_main_menu())
            await state.clear()
        else:
            await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
            await state.set_state(Registration.waiting_for_full_name)


@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    pool = message.bot.get("db_pool")
    if not pool:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    async with pool.acquire() as conn:
        try:
            if await is_admin(conn, message.from_user.id):
                await message.answer(
                    "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="Markdown",
                    reply_markup=get_admin_menu_keyboard()
                )
            else:
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        except Exception as e:
            logger.error(f"DB error on admin check: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(Registration.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    full_name = message.text.strip()
    if not full_name or len(full_name.split()) < 2:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).")
        return
    
    await state.update_data(full_name=full_name)
    await message.answer("üìÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990):")
    await state.set_state(Registration.waiting_for_birth_date)


@router.message(Registration.waiting_for_birth_date)
async def process_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
    birth_date = message.text.strip()
    if not is_valid_date(birth_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.1990).")
        return

    date_obj = datetime.strptime(birth_date, '%d.%m.%Y').date()
    if date_obj > datetime.now().date():
        await message.answer("‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
        return

    await state.update_data(birth_date=birth_date)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=get_phone_keyboard())
    await state.set_state(Registration.waiting_for_phone)


@router.message(Registration.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not message.contact:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    user_data = await state.get_data()
    full_name = user_data["full_name"]
    birth_date_str = user_data["birth_date"]

    pool = message.bot.get("db_pool")
    if not pool:
        await message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    async with pool.acquire() as conn:
        try:
            await register_user(conn, user_id, full_name, birth_date_str, phone_number)
        except Exception as e:
            logger.error(f"DB error on user registration: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await message.answer(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–§–ò–û: {full_name}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date_str}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone_number}",
            reply_markup=get_main_menu()
        )
        await state.clear()


@router.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=get_request_type_keyboard())
    await state.set_state(RequestForm.choosing_type)


@router.message(RequestForm.choosing_type)
async def process_request_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞—è–≤–∫–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return

    if message.text not in ["üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè¢ –û—Ñ–∏—Å", "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", "‚ùì –î—Ä—É–≥–æ–µ"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")
        return

    await state.update_data(request_type=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.", reply_markup=get_cancel_keyboard())
    await state.set_state(RequestForm.attaching_screenshot)


@router.message(RequestForm.attaching_screenshot)
async def process_screenshot(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await message.answer("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu())
        await state.clear()
        return

    if not message.photo and message.content_type != "text":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.")
        return

    photo_id = message.photo[-1].file_id if message.photo else None
    await state.update_data(screenshot=photo_id)

    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è:", reply_markup=get_options_inline_keyboard())
    await state.set_state(RequestForm.choosing_options)


@router.callback_query(RequestForm.choosing_options)
async def process_options_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –∑–∞—è–≤–∫–∏"""
    option_map = {
        "equipment": "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
        "it": "IT-–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "cleaning": "–£–±–æ—Ä–∫–∞",
        "coffee": "–ö–æ—Ñ–µ"
    }

    state_data = await state.get_data()
    selected = set(state_data.get("options", []))

    if callback.data.startswith("option:"):
        await _handle_option_selection(callback, state, selected, option_map)
        return

    if callback.data == "confirm":
        await _handle_request_confirmation(callback, state, selected, option_map)


async def _handle_option_selection(callback: CallbackQuery, state: FSMContext, selected: set, option_map: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–ø—Ü–∏–∏"""
    option = callback.data.split(":", 1)[1]
    if option in selected:
        selected.remove(option)
    else:
        selected.add(option)
    
    await state.update_data(options=list(selected))
    await callback.message.edit_reply_markup(reply_markup=get_options_inline_keyboard(selected))
    await callback.answer()


async def _handle_request_confirmation(callback: CallbackQuery, state: FSMContext, selected: set, option_map: dict):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    if not selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç!", show_alert=True)
        return

    pool = callback.bot.get("db_pool")
    if not pool:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
        await state.clear()
        await callback.answer()
        return

    async with pool.acquire() as conn:
        try:
            user_id = callback.from_user.id
            state_data = await state.get_data()
            user_info = await conn.fetchrow("SELECT full_name, phone_number FROM users WHERE user_id = $1", user_id)
            request_id = await save_request(
                conn, user_id, state_data["request_type"], state_data.get("screenshot"), list(selected)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_main_menu())
            await state.clear()
            await callback.answer()
            return

        await _send_request_to_admin(callback, state_data, selected, option_map, user_info, request_id)
        await callback.message.edit_reply_markup()
        await callback.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ!", reply_markup=get_main_menu())
        await state.clear()
        await callback.answer()


async def _send_request_to_admin(callback: CallbackQuery, state_data: dict, selected: set, option_map: dict, user_info: dict, request_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    caption = f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id}\n–û—Ç: {user_info['full_name']} ({user_info['phone_number']})\n–¢–∏–ø: {state_data['request_type']}\n–ü—Ä–µ–¥–º–µ—Ç—ã: {', '.join([option_map.get(opt, opt) for opt in selected])}"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—å', url=f'tg://user?id={callback.from_user.id}')]
    ])

    try:
        if state_data.get("screenshot"):
            await callback.bot.send_photo(ADMIN_CHAT_ID, state_data["screenshot"], caption=caption, reply_markup=kb)
        else:
            await callback.bot.send_message(ADMIN_CHAT_ID, caption, reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")


@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def handle_contacts(message: Message):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    contacts = (
        "üìû *–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã*\n\n"
        "üìß *Email*: blazekartet@gmail.com\n"
        "‚òéÔ∏è *–¢–µ–ª–µ—Ñ–æ–Ω*: +7 (951) 891-68-71\n"
        "üè¢ *–ê–¥—Ä–µ—Å*: –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –¢–æ–≤–∞—Ä–∏—â–µ—Å–∫–∞—è, –¥. 31–ë\n\n"
        "üëá –ù–∞—à —Å–∞–π—Ç:"
    )
    await message.answer(contacts, parse_mode="Markdown", reply_markup=get_contacts_inline_keyboard())


@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏")
async def handle_company_info(message: Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏"""
    company_text = (
        "üåü *–û –Ω–∞—Å* üåü\n\n"
        "–ú—ã - *HOLIDAY Company*! üöÄ\n"
        "–° 2020 –≥–æ–¥–∞ –º—ã —Å–æ–∑–¥–∞—ë–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –∂–∏–∑–Ω—å –ø—Ä–æ—â–µ –∏ –ª—É—á—à–µ.\n"
        "–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –æ–±—ä–µ–¥–∏–Ω—è—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ –ª—é–¥–µ–π –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–µ–ª–∏–∫–∏—Ö —Ü–µ–ª–µ–π! üåç\n\n"
        "üîπ *–ß—Ç–æ –º—ã –¥–µ–ª–∞–µ–º?*\n"
        "- –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º IT-–ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "- –ü–æ–º–æ–≥–∞–µ–º –±–∏–∑–Ω–µ—Å—É —Ä–∞—Å—Ç–∏\n"
        "- –°–æ–∑–¥–∞—ë–º —Å–æ–æ–±—â–µ—Å—Ç–≤–æ\n\n"
        "üîπ *–ü–æ—á–µ–º—É –º—ã?*\n"
        "- –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å\n"
        "- –ö–∞—á–µ—Å—Ç–≤–æ\n"
        "- –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ üíº"
    )
    try:
        await message.answer_photo(FSInputFile("images/company_logo2.jpg"), caption=company_text, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer(company_text, parse_mode="Markdown")
